@mixin page {
	@include vendor('transition', (
        'filter #{_duration(menu)} ease',
        '-webkit-filter #{_duration(menu)} ease',
        'opacity 0.375s ease-out'
    ));
    padding-top: 3.25em;

    &.is-transitioning {
        opacity: 0;
    }

    @include breakpoint(small) {
        padding-top: 2.75em;
    }
}

@mixin inner {
	> .inner {
		@include padding(4em, 0);
		margin: 0 auto;
		max-width: _size(inner);
		width: calc(100% - 6em);

		@include breakpoint(small) {
			@include padding(3em, 0);
			width: calc(100% - 3em);
		}
	}
}

@mixin close($height: 4em, $width: 4em) {
	.close {
		@include vendor('transition', 'color #{_duration(transition)} ease-in-out');
		-webkit-tap-highlight-color: rgba(0,0,0,0);
		border: 0;
		cursor: pointer;
		display: block;
		height: $height;
		line-height: $height;
		overflow: hidden;
		padding-right: 1.25em;
		position: absolute;
		right: 0;
		text-align: right;
		text-indent: 8em;
		top: 0;
		vertical-align: middle;
		white-space: nowrap;
		width: $width;

		&:before, &:after {
			@include vendor('transition', 'opacity #{_duration(transition)} ease-in-out');
			background-position: center;
			background-repeat: no-repeat;
			content: '';
			display: block;
			height: $height;
			position: absolute;
			right: 0;
			top: 0;
			width: $width;
		}

		&:before {
			background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0 0 20 20" zoomAndPan="disable"><style>line { stroke: #{_palette(fg-bold)}; stroke-width: 2; }</style><line x1="0" y1="0" x2="20" y2="20" /><line x1="20" y1="0" x2="0" y2="20" /></svg>');
		}

		&:after {
			background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0 0 20 20" zoomAndPan="disable"><style>line { stroke: #{_palette(highlight)}; stroke-width: 2; }</style><line x1="0" y1="0" x2="20" y2="20" /><line x1="20" y1="0" x2="0" y2="20" /></svg>');
			opacity: 0;
		}

		&:hover, &:active {
			&:after {
				opacity: 1;
			}
		}
	}
}

/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

	text-decoration: none;

	&:#{$where} {

		@if $content {
			content: $content;
		}

		-moz-osx-font-smoothing: grayscale;
		-webkit-font-smoothing: antialiased;
		font-family: FontAwesome;
		font-style: normal;
		font-weight: normal;
		text-transform: none !important;

	}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

	@if $important {
		$important: '!important';
	}

	padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max(0.1em, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

	$svg: str-replace($svg, '"', '\'');
	$svg: str-replace($svg, '<', '%3C');
	$svg: str-replace($svg, '>', '%3E');
	$svg: str-replace($svg, '&', '%26');
	$svg: str-replace($svg, '#', '%23');
	$svg: str-replace($svg, '{', '%7B');
	$svg: str-replace($svg, '}', '%7D');
	$svg: str-replace($svg, ';', '%3B');

	@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}